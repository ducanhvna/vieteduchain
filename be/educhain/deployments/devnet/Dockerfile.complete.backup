FROM golang:1.22-bookworm AS builder

# Install necessary build tools and dependencies for CGO
RUN apt-get update && apt-get install -y \
    git \
    build-essential \
    curl \
    make \
    bash \
    jq \
    gcc \
    libc6-dev \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Rust and Cargo for building wasmvm
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y && \
    export PATH="$HOME/.cargo/bin:$PATH" && \
    ln -s $HOME/.cargo/bin/cargo /usr/local/bin/cargo && \
    ln -s $HOME/.cargo/bin/rustc /usr/local/bin/rustc && \
    ln -s $HOME/.cargo/bin/rustup /usr/local/bin/rustup

# Set versions explicitly to ensure compatibility
ENV WASMD_VERSION=v0.54.1
ENV WASMVM_VERSION=v1.5.0
ENV COSMOS_SDK_VERSION=v0.50.3

# Clone wasmvm and build libwasmvm.so first
WORKDIR /go/src/github.com/CosmWasm/wasmvm
RUN git clone --depth 1 --branch ${WASMVM_VERSION} https://github.com/CosmWasm/wasmvm.git . && \
    cd libwasmvm && \
    cargo update -p time && \
    cargo build --release && \
    mkdir -p /lib && \
    cp target/release/libwasmvm.so /lib/libwasmvm.so && \
    ls -l /lib/libwasmvm.so

# Build wasmd from source
WORKDIR /go/src/github.com/CosmWasm/wasmd
RUN git clone --depth 1 --branch ${WASMD_VERSION} https://github.com/CosmWasm/wasmd.git . && \
    # Create a branch to avoid detached HEAD warnings
    git checkout -b build-branch && \
    # Modify go.mod to use compatible Go version
    go mod edit -go=1.22 && \
    # Install dependencies with specific versions
    go mod download && \
    # Make sure we have the libwasmvm.so in the correct location for the build
    mkdir -p /go/pkg && \
    cp /lib/libwasmvm.so /go/pkg/ && \
    # Build wasmd binary with explicit WASMVM_VERSION
    LEDGER_ENABLED=false CGO_ENABLED=1 WASMVM_VERSION=${WASMVM_VERSION} go build \
      -mod=readonly \
      -tags "netgo" \
      -ldflags "-w -s -X github.com/cosmos/cosmos-sdk/version.Name=wasmd -X github.com/cosmos/cosmos-sdk/version.AppName=wasmd -X github.com/cosmos/cosmos-sdk/version.Version=${WASMD_VERSION} -X github.com/cosmos/cosmos-sdk/version.ServerName=wasmd" \
      -o /go/bin/wasmd ./cmd/wasmd && \
    # Verify the binary
    /go/bin/wasmd version

# Final stage
FROM debian:bookworm-slim

# Install minimal required packages
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    jq \
    python3 \
    python3-pip \
    procps \
    wget \
    gcc \
    libc6-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Install python3-venv for virtual environment support
RUN apt-get update && apt-get install -y python3-venv && rm -rf /var/lib/apt/lists/*

# Create a Python virtual environment and install FastAPI dependencies inside it
RUN python3 -m venv /venv \
    && /venv/bin/pip install --upgrade pip \
    && /venv/bin/pip install --no-cache-dir \
        fastapi==0.109.2 \
        uvicorn==0.27.1 \
        httpx==0.26.0 \
        pydantic==2.6.1 \
        python-dotenv==1.0.1 \
        orjson==3.9.12 \
        pymongo==4.6.1

# Copy the wasmd binary from builder stage
COPY --from=builder /go/bin/wasmd /usr/local/bin/wasmd

# Copy libwasmvm.so from builder stage and create necessary symlinks
COPY --from=builder /lib/libwasmvm.so /lib/libwasmvm.so
RUN chmod 755 /lib/libwasmvm.so && \
    ln -sf /lib/libwasmvm.so /lib/libwasmvm.aarch64.so && \
    ln -sf /lib/libwasmvm.so /lib/libwasmvm.x86_64.so && \
    # Check if /lib and /usr/lib are different directories
    if [ "$(readlink -f /lib)" != "$(readlink -f /usr/lib)" ]; then \
        ln -sf /lib/libwasmvm.so /usr/lib/libwasmvm.so; \
    else \
        echo "/lib and /usr/lib are the same directory, skipping symlink"; \
    fi

# Verify wasmd version and library availability
RUN wasmd version || echo "Unable to check version but continuing" && \
    ls -la /lib/libwasmvm* && \
    ldd /usr/local/bin/wasmd || echo "Skipping ldd check"

# Set up the library path and environment variables
ENV LD_LIBRARY_PATH=/lib:/usr/lib
ENV DAEMON_NAME=wasmd
ENV DAEMON_HOME=/root/.wasmd
ENV DAEMON_ALLOW_DOWNLOAD_BINARIES=true
ENV DAEMON_RESTART_AFTER_UPGRADE=true

# Create directory for wasmd data
WORKDIR /root
RUN mkdir -p /root/.wasmd && chmod 755 /root/.wasmd

# Set up the chain directory for FastAPI
RUN mkdir -p /chain

# Copy FastAPI code
COPY chain /chain

# Create log directory for API output
RUN mkdir -p /var/log

# Expose ports
# 26656: P2P port for Tendermint
# 26657: RPC port for Tendermint
# 1317: Cosmos REST API
# 1318: FastAPI Custom REST API
# 9090: gRPC port
EXPOSE 26656 26657 1317 1318 9090

# Note: entrypoint will be provided by docker-compose via volume mount
CMD ["/bin/bash"]
